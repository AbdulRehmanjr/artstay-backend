generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  userId      String      @id @default(cuid())
  email       String      @unique
  password    String      @default("none")
  accountType AccountType @default(NONE)

  Artisan Artisan?
  Safari  Safari?
  Fair    Fair?
  Shop    Shop?
}

model Craft {
  craftId   String     @id @default(cuid())
  craftName String     @default("none")
  craftSlug String     @default("none")
  createdAt DateTime   @default(now())
  updateAt  DateTime   @updatedAt
  SubCraft  SubCraft[]
  Artisan   Artisan[]
}

model SubCraft {
  subCraftId   String    @id @default(cuid())
  subCraftName String    @default("none")
  subCraftSlug String    @default("none")
  craftId      String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  craft        Craft     @relation(fields: [craftId], references: [craftId], onDelete: Cascade, onUpdate: Cascade)
  Artisan      Artisan[]
}

/**
 * *
 * ARTISAN
 */

model Artisan {
  artisanId    String      @id @default(cuid())
  firstName    String      @default("none")
  lastName     String      @default("none")
  dp           String      @default("none")
  address      String      @default("none")
  description  String      @default("none")
  experience   Experience  @default(APPRENTICE)
  education    Education   @default(NON_FORMAL)
  training     Training    @default(NON_FORMAL)
  certificate  Certificate @default(NONE)
  recongnition Recognition @default(STATE)
  craftId      String
  subCraftId   String
  accountId    String      @unique
  portfolioId  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  account        Account          @relation(fields: [accountId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
  subCraft       SubCraft         @relation(fields: [subCraftId], references: [subCraftId], onDelete: Cascade, onUpdate: Cascade)
  craft          Craft            @relation(fields: [craftId], references: [craftId], onDelete: Cascade, onUpdate: Cascade)
  Portfolio      Portfolio        @relation(fields: [portfolioId], references: [portfolioId], onDelete: Cascade, onUpdate: Cascade)
  ArtisanPackage ArtisanPackage[]
}

model ArtisanPackage {
  packageId  String   @id @default(cuid())
  duration   Int      @default(0)
  features   String[] @default([])
  experience String   @default("none")
  price      Int      @default(0)
  title      String   @default("none")
  artisanId  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  artisan    Artisan  @relation(fields: [artisanId], references: [artisanId], onDelete: Cascade, onUpdate: Cascade)
}

model Portfolio {
  portfolioId String    @id @default(cuid())
  images      String[]  @default([""])
  Artisan     Artisan[]
}

/**
 * *
 * SAFARI
 */

model Safari {
  safariId    String   @id @default(cuid())
  firstName   String   @default("none")
  lastName    String   @default("none")
  dp          String   @default("none")
  address     String   @default("none")
  description String   @default("none")
  accountId   String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  account    Account      @relation(fields: [accountId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
  SafariTour SafariTour[]
}

model SafariTour {
  tourId      String   @id @default(cuid())
  title       String   @default("none")
  operator    String   @default("none")
  description String   @default("nones") @db.Text
  duration    String   @default("none")
  features    String[] @default([])
  fee         Int      @default(0)
  safariId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  safari Safari @relation(fields: [safariId], references: [safariId], onDelete: Cascade, onUpdate: Cascade)
}

/**
 * *
 * FAIR
 */

model Fair {
  fairId      String   @id @default(cuid())
  firstName   String   @default("none")
  lastName    String   @default("none")
  dp          String   @default("none")
  address     String   @default("none")
  description String   @default("none")
  accountId   String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  account   Account     @relation(fields: [accountId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
  FairEvent FairEvent[]
}

model FairEvent {
  eventId     String        @id @default(cuid())
  title       String        @default("none")
  location    EventLocation @default(LOCAL)
  vanue       String        @default("none")
  startDate   String        @default("none")
  endDate     String        @default("none")
  organizer   String        @default("none")
  fairType    FairType      @default(FAIR)
  latitude    Float         @default(0.0)
  longitude   Float         @default(0.0)
  description String        @default("none") @db.Text
  fairId      String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  fair        Fair          @relation(fields: [fairId], references: [fairId], onDelete: Cascade, onUpdate: Cascade)
}

/**
 * SHOP
 */

model Shop {
  shopId      String   @id @default(cuid())
  shopName    String   @default("none")
  address     String   @default("none")
  description String   @default("none") @db.Text
  shopTiming  String   @default("none-none")
  workingDays String[] @default([])
  dp          String   @default("none")
  accountId   String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  account  Account   @relation(fields: [accountId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
  products Product[]
}

model Product {
  productId   String   @id @default(cuid())
  name        String
  description String   @db.Text
  price       Float
  images      String[]
  category    String
  material    String
  dimensions  String?
  weight      Float?
  stock       Int      @default(0)
  isAvailable Boolean  @default(true)
  craftType   String // Specific type of Kashmir craft
  artisanMade Boolean  @default(true)
  shopId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  shop Shop @relation(fields: [shopId], references: [shopId], onDelete: Cascade, onUpdate: Cascade)
}

enum FairType {
  FAIR
  EXHIBITION
  MUSEUM
}

enum EventLocation {
  INTERNATIONAL
  NATIONAL
  LOCAL
}

enum Education {
  FORMAL
  NON_FORMAL
}

enum Training {
  FORMAL
  NON_FORMAL
}

enum Certificate {
  NONE
  PROFESSIONAL
  TRADE
  WORKSHOP
}

enum Recognition {
  STATE
  NATIONAL
  INTERNATIONAL
}

enum Experience {
  APPRENTICE
  CRAFTMAN
  MASTER
  GRANDMASTER
}

enum AccountType {
  NONE
  ARTISAN
  SAFARI
  FAIRS
  BUSINESS
  HOTEL
  ALL
  ADMIN
  SUPERADMIN
}
